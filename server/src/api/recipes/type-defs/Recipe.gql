# import User from "../../users/type-defs/User.gql"

type Recipe {
  _id: ID!
  user: User!
  name: String!
  ingredients: [Ingredient]!
  description: String
  instructions: String
  picturePath: String
  cookingTime: Int!
  difficulty: String!
  likesCount: Int
  likedByUser: Boolean
  comments: [Comment]
  createdAt: String!
  cursor: String!
}

type RecipeConnection {
  edges: [RecipeEdge!]!
  pageInfo: PageInfo!
}

type RecipeEdge {
  node: Recipe!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type Ingredient {
  name: String!
  amount: String
}

type Comment {
  user: User!
  text: String!
  createdAt: String!
}

input CommentInput {
  id: ID!
  text: String!
}

input RecipeInput {
  name: String!
  ingredients: [IngredientInput]!
  description: String
  instructions: String
  picturePath: String
  cookingTime: Int!
  difficulty: String!
}

input UpdateRecipeInput {
  name: String!
  ingredients: [IngredientInput]!
  description: String
  instructions: String
  picturePath: String
  cookingTime: Int!
  difficulty: String!
}

input IngredientInput {
  name: String!
  amount: String
}

type Query {
  getRecipes(
    query: String
    userId: ID
    ingredients: [String]
    difficulty: String
    matchAll: Boolean
    first: Int
    after: String
  ): RecipeConnection!
  searchRecipes(
    userId: ID
    query: String!
    first: Int
    after: String
  ): RecipeConnection!
  getRecipe(id: ID!): Recipe
  getComments(id: ID!): [Comment]!
  getAllIngredients: [Ingredient]!
}

type Mutation {
  createRecipe(input: RecipeInput!): Recipe
  updateRecipe(id: ID!, input: UpdateRecipeInput!): Recipe!
  deleteRecipe(id: ID!): String
  likeRecipe(id: ID!): Recipe!
  commentRecipe(input: CommentInput!): [Comment]!
}
